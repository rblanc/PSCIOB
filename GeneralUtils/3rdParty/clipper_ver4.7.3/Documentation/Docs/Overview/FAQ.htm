<html>

<head>
    
  <script type="text/javascript" src="../../Scripts/jquery.js">
  </script>
    
  <script type="text/javascript" src="../../Scripts/SyntaxHighlighter/scripts/shCore.js">
  </script>
    
  <script type="text/javascript" src="../../Scripts/SyntaxHighlighter/scripts/shBrushDelphi.js">
  </script>
    
  <link type="text/css" rel="stylesheet" href="../../Scripts/SyntaxHighlighter/styles/shCore.css">
    
  <link type="text/css" rel="stylesheet" href="../../Scripts/SyntaxHighlighter/styles/shThemeDefault.css">
  

  <title>FAQ</title>  

  <link rel="stylesheet" href="../../styles/Default.css" type="text/css">

    
  <script type="text/javascript" src="../../Scripts/bootstrap.js">
  </script>
  
</head>

<body bgcolor="#FFFFFF">
    
  <!-- THIS FILE HAS BEEN AUTOMATICALLY PROCESSED FROM A SOURCE COPY -->
    
  <!-- DO NOT EDIT MANUALLY !!! -->
  
  <table class="Banner" cellspacing="0" cellpadding="0" border="1" bordercolorlight="#303080" bordercolordark="#7070B0">
    <tr>
      <td class="Banner" nowrap=""><a href="../_Body.htm" class="Banner"><img src="../../Images/_Home.gif" align="absmiddle">Home</a>
      </td>
      <td class="Banner" nowrap=""><a href="_Body.htm" class="Banner">Overview</a>
      </td>
      <td class="Banner" width="100%" align="right"><img src="../../Images/_Project_Logo.gif" align="absmiddle">
      </td>
    </tr>
  </table>
  <h1>FAQ</h1>


  <p class="Decl2">Why does Clipper use integer coordinates, not floats?</p>

  <p class="Decl4">Initially Clipper did use floating point coordinates but the clipping algorithm wasn't numerically robust. Consequently, very occasionally errors occurred which prevented Clipper from returning a solution. These issues have completely resolved since swapping to integer coordinates.<br><br> </p>


  <p class="Decl2">How do I use floating point coordinates with Clipper?</p>

  <p class="Decl4">It's a simple task to multiply your floating point coordinates by a scaling factor that's a power of 10 (depending on the desired precision). Then with the solution polygons, divide the returned coordinates by this same scaling factor. Clipper accepts integer coordinates as large as +/-6.5 e18, so it can accommodate very large scaling factors.<br><br> </p>


  <p class="Decl2">Does Clipper handle polygons with holes?</p>

  <p class="Decl4">Polygon 'holes' are implied simply by having their orientations opposite that of their container polygons.<br><br> </p>


  <p class="Decl2">Why are there separate fill rules for Subject and Clip polygons?</p>

  <p class="Decl4"> Because users may want to use different fill rules for these polygons. However it's important to note that these fill rules apply solely within subject and clip polygons to define their respective regions. These rules aren't applied to the clip operation itself where subject and clip polygons are merged into a single solution. If you wish for a fill rule to apply to the merging of subject and clip polygons as well - typically during a UNION operation, then you should UNION all the polygons as subjects without assigning any clip polygons.<br><br> </p>


  <p class="Decl2">Which fill rule does the boolean clipping operation use?</p>

  <p class="Decl4"> Perhaps the easiest way to explain what happens during clipping is to consider the following. First the subject and clip polygons are filled using their respective fill rules. With the subject polygons, assign a winding count (WC) of +1 to any filled region and a WC of 0 to any unfilled region. Do likewise with the clip polygons. Then the following winding rules apply to the clipping operation ...<br> &nbsp;&nbsp;&diams; Intersection: add subject and clip regions and return those regions where WC == +2<br> &nbsp;&nbsp;&diams; Union: add subject and clip regions and return those regions where WC > 0<br> &nbsp;&nbsp;&diams; Difference: subtract clip from subject regions and return those regions where WC == +1<br> &nbsp;&nbsp;&diams; XOR: subtract clip from subject regions and return those regions where WC != 0<br><br> </p>


  <p class="Decl2">Some solution polygons share a common edge. Is this a bug?</p>

  <p class="Decl4"> No. However Clipper tries very hard to minimize this by merging polygons that share a common edge.<br><br> </p>


  <p class="Decl2">I have lots of polygons that I want to 'union'. Can I do this in one operation?</p>

  <p class="Decl4"> Yes. Just add all the polygons as subject polygons to the Clipper object and don't assign any clip polygons.<br><br> </p>


  <p class="Decl2">The <a href="../Units/ClipperLib/Functions/OffsetPolygons.htm">OffsetPolygons</a> function is returning unexpected results? Could this be a bug?</p>

  <p class="Decl4"> Most likely the <a href="../Units/ClipperLib/Functions/Orientation.htm">orientation</a> of the input polygons is wrong.<br><br> </p>


  <p class="Decl2">Is it possible to get the offset of a line or polyline?</p>

  <p class="Decl4"> Yes, just convert the polyline into a polygon. Do this by appending to the polyline a reverse copy of the polyline. However, to avoid duplicate coordinates, the reverse copy should exclude the first and last coordinates: c1,c2,...,cn, c(n-1),...,c2. You don't need to append anything to a straight line since omitting the first and last coordinates returns an empty set.<br><br> </p>



  <h2 id="auto">See Also</h2>
  <p id="auto" class="Body"><a href="../Units/ClipperLib/Functions/OffsetPolygons.htm">OffsetPolygons</a>, <a href="../Units/ClipperLib/Functions/Orientation.htm">Orientation</a></p>
    
  <p class="Copyright" id="auto"> <br><br> Copyright &copy;2010-2012 Angus Johnson&nbsp; - &nbsp; Clipper version 4.7.2 &nbsp; - &nbsp; Help file built on 4-March-2012 <br><br> </p>
  
</body>


</html>